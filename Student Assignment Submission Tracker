#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Node structure
struct Submission {
    int studentID;
    char title[50];
    char date[20];
    char status[15];
    struct Submission* next;
};

// Head pointer
struct Submission* head = NULL;

// Function to create new submission node
struct Submission* createNode(int id, char* title, char* date, char* status) {
    struct Submission* newNode = (struct Submission*)malloc(sizeof(struct Submission));
    newNode->studentID = id;
    strcpy(newNode->title, title);
    strcpy(newNode->date, date);
    strcpy(newNode->status, status);
    newNode->next = NULL;
    return newNode;
}

// Add new submission record
void addSubmission(int id, char* title, char* date, char* status) {
    struct Submission* newNode = createNode(id, title, date, status);
    if (head == NULL) {
        head = newNode;
    } else {
        struct Submission* temp = head;
        while (temp->next != NULL)
            temp = temp->next;
        temp->next = newNode;
    }
    printf("Submission added successfully!\n");
}

// Update status
void updateStatus(int id, char* title, char* newStatus) {
    struct Submission* temp = head;
    while (temp != NULL) {
        if (temp->studentID == id && strcmp(temp->title, title) == 0) {
            strcpy(temp->status, newStatus);
            printf("Status updated successfully!\n");
            return;
        }
        temp = temp->next;
    }
    printf("Submission not found!\n");
}

// Search submissions by Student ID
void searchSubmission(int id) {
    struct Submission* temp = head;
    int found = 0;
    while (temp != NULL) {
        if (temp->studentID == id) {
            printf("\nStudent ID: %d\nAssignment: %s\nDate: %s\nStatus: %s\n",
                   temp->studentID, temp->title, temp->date, temp->status);
            found = 1;
        }
        temp = temp->next;
    }
    if (!found)
        printf("No submissions found for Student ID %d\n", id);
}

// Display all records
void displayAll() {
    struct Submission* temp = head;
    if (temp == NULL) {
        printf("No records found!\n");
        return;
    }
    printf("\n--- All Submissions ---\n");
    while (temp != NULL) {
        printf("Student ID: %d | Assignment: %s | Date: %s | Status: %s\n",
               temp->studentID, temp->title, temp->date, temp->status);
        temp = temp->next;
    }
}

// Main menu
int main() {
    int choice, id;
    char title[50], date[20], status[15];

    do {
        printf("\n--- Assignment Submission Tracker ---\n");
        printf("1. Add Submission\n");
        printf("2. Update Status\n");
        printf("3. Search by Student ID\n");
        printf("4. Display All Records\n");
        printf("5. Exit\n");
        printf("Enter choice: ");
        scanf("%d", &choice);
        getchar(); // clear newline

        switch (choice) {
            case 1:
                printf("Enter Student ID: ");
                scanf("%d", &id);
                getchar();
                printf("Enter Assignment Title: ");
                fgets(title, sizeof(title), stdin);
                title[strcspn(title, "\n")] = 0; // remove newline
                printf("Enter Submission Date: ");
                fgets(date, sizeof(date), stdin);
                date[strcspn(date, "\n")] = 0;
                printf("Enter Status (Submitted/Pending): ");
                fgets(status, sizeof(status), stdin);
                status[strcspn(status, "\n")] = 0;
                addSubmission(id, title, date, status);
                break;

            case 2:
                printf("Enter Student ID: ");
                scanf("%d", &id);
                getchar();
                printf("Enter Assignment Title: ");
                fgets(title, sizeof(title), stdin);
                title[strcspn(title, "\n")] = 0;
                printf("Enter New Status: ");
                fgets(status, sizeof(status), stdin);
                status[strcspn(status, "\n")] = 0;
                updateStatus(id, title, status);
                break;

            case 3:
                printf("Enter Student ID: ");
                scanf("%d", &id);
                searchSubmission(id);
                break;

            case 4:
                displayAll();
                break;

            case 5:
                printf("Exiting...\n");
                break;

            default:
                printf("Invalid choice!\n");
        }
    } while (choice != 5);

    return 0;
}
